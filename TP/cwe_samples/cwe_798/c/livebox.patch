12,13c12,13
< **	username/password
< **	http://cwe.mitre.org/data/definitions/798.html
---
> **	username/password.
> **	See http://cwe.mitre.org/data/definitions/798.html.
14a15,22
> **	Patch: This is not fully a patch of the previous "livebox.c" vulnerability,
> **	due to time constraint. The best idea is to work as close as Linux do
> **	with shadow file. This file store for each user its associated password
> **	hashed with a given algorithm, let say SHA-{256,512}. Before being hashed 
> **	the plain password is padded with a unique salt also stored in shadow file.
> **	Access to this file either read or write should be properly set by only 
> **	legetimate programs.
> **	This a malicious user could not easily recovered password.
16a25
> #include<assert.h>
18a28,29
> #include<stdint.h>
> #include<openssl/md5.h>
20,22c31,38
< // Top Secret/Orange Only/INT
< static const char*	adm_name	= "admin";
< static const char*	adm_pwd		= "admin";
---
> // This is the begining of a line extracted from /etc/shadow
> // We don't care here how to retrieve this
> static const char*	shadow_dump	= "root$1$MIAOU$e69eefe431884d2c90c301fcc27a4e09$";
> // We will use this variable in order to bypass string parsing, this shoudl not be seen by user 
> static const char*	adm_name	= "root";
> static const char*	adm_salt	= "MIAOU";
> // by knowing this we cannot retrieve the clear password : md5("weakMIAOU")
> static const char*	adm_pwd		= "e69eefe431884d2c90c301fcc27a4e09";
23a40,65
> static char*
> _print_sum(unsigned char* md)
> {
>     uint32_t	i;
>     char* buf;
> 
>     buf = (char*)malloc(33 * sizeof(char));
> 
>     for(i = 0; i < 16; ++i)
> 	{
> 	    sprintf(buf+i*2, "%02x", md[i]);
> 	}
> 
>     buf[33] = '\0';
> 
>     return(buf);
> }
> 
> /*
> ** Check both if given username match expected one.
> ** Also check if given password once it has been hashed with a very secure
> ** algorithm MD5 (don't use this) match adm_pwd
> **
> ** :param username: user input username
> ** :param password: user input password
> */ 
27c69,88
<     int8_t	res;
---
>     int8_t		res;
>     int8_t		ret;
>     unsigned char	sec_pwd[16];
>     MD5_CTX		ctx;
>     char*		sec_pwd_hex;
>     size_t		salt_pwd_len;
>     char*		salted_pwd;
> 
>     salt_pwd_len = strlen(adm_salt);
>     salt_pwd_len += strlen(password);
> 
>     salted_pwd = (char*)malloc((salt_pwd_len + 1) * sizeof(char));
>     assert(salted_pwd != NULL);
>     sprintf(salted_pwd, "%s%s", password, adm_salt);
> 
>     // Compute the MD5 of user input password either binary and digest one
>     MD5_Init(&ctx);
>     MD5_Update(&ctx, salted_pwd, salt_pwd_len);
>     MD5_Final(sec_pwd, &ctx);
>     sec_pwd_hex = _print_sum(sec_pwd);
29c90,91
<     res = 0;
---
>     // check of the md5(password) == adm_pwd & username == adm_name
>     res = memcmp(adm_pwd, sec_pwd_hex, 32);
31d92
<     // We are just checking if both username and password match expected one without leading to timing attack
34c95
< 	    res = 1;
---
> 	    ret = 1;
38c99
< 	    res = 0;
---
> 	    ret = 0;
40,41c101,102
<     
<     if(strcmp(adm_pwd, password) == 0)
---
> 
>     if(res == 0)
43c104
< 	    res = res & 1;
---
> 	    return(1 & ret);
47c108
< 	    res = 0;
---
> 	    return(0);
49,50d109
< 
<     return(res);    
60,62c119
< 	    fprintf(stderr, "Usage: %s <username> <password>\n\n", argv[0]);
< 	    fprintf(stderr, "username:\tyour username\n");
< 	    fprintf(stderr, "password:\tpassword associated with you username\n");
---
> 	    fprintf(stderr, "Usage: %s <username> <password>\n", argv[0]);
70c127
< 	    printf("Access granted %s\n", argv[1]);
---
> 	    printf("Access granted\n");
74c131
< 	    printf("Access denied: username/password unknwon\n");
---
> 	    printf("Access denied\n");
